name: Tests

# on:
#   pull_request:
#   push:
#     branches:
#       - master
#   schedule:
#     - cron: '0 0 * * *'
#   workflow_dispatch:

on:
  pull_request:
  push:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  tests:
    env:
      NPROC: 2
    strategy:
      fail-fast: false
      matrix:
        cache_marker: [ 24 ]
        platform:
          - {
            icon: 🐧,
            label: Linux,
            os: ubuntu,
            shell: bash --noprofile --norc -eo pipefail
          }
          - {
            icon: 🍎,
            label: macOS,
            os: macos,
            shell: bash --noprofile --norc -eo pipefail
          }
          - {
            icon: 🏁,
            label: Windows,
            os: windows,
            shell: msys2
          }
        nim_version: [ version-1-2, version-1-6, version-2-0 ]
    name: ${{ matrix.platform.icon }} ${{ matrix.platform.label }} - Nim ${{ matrix.nim_version }}
    runs-on: ${{ matrix.platform.os }}-latest
    defaults:
      run:
        shell: ${{ matrix.platform.shell }} {0}

    steps:
      - name: Install tools and libraries via APT (Linux)
        if: matrix.platform.os == 'ubuntu'
        run: |
          sudo apt-fast update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-fast install --no-install-recommends -yq \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libdeflate-dev \
            libswscale-dev \
            libunistring-dev

      - name: Install tools and libraries via Homebrew (macOS)
        if: matrix.platform.os == 'macos'
        run: |
          brew install \
            coreutils \
            ffmpeg \
            findutils \
            libdeflate \
            libunistring \
            ncurses

      - name: Install tools and libraries via MSYS2 (Windows)
        if: matrix.platform.os == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: >
            base-devel
            git
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ffmpeg
            mingw-w64-ucrt-x86_64-libdeflate
            mingw-w64-ucrt-x86_64-libunistring
            mingw-w64-ucrt-x86_64-toolchain

      - name: Checkout nim-notcurses sources from GitHub
        uses: actions/checkout@v3

      - name: Calculate cache key components
        id: cache-key
        run: |
          export CHOOSENIM_VERSION=$(curl -sSfL https://nim-lang.org/choosenim/stable)
          export NOTCURSES_VERSION=$(cat .notcurses_version)
          echo "choosenim_version=${CHOOSENIM_VERSION}" >> ${GITHUB_OUTPUT}
          echo "notcurses_version=${NOTCURSES_VERSION}" >> ${GITHUB_OUTPUT}
          tmpdir="$(mktemp -d)" && cd "${tmpdir}"
          clone1b () {
            echo "$1_commit=$( \
              git clone --depth 1 $2 $1 \
                        --branch $3 \
                        --single-branch 2>/dev/null && \
              cd $1 && git rev-parse HEAD)" >> ${GITHUB_OUTPUT}
          }
          clone1b choosenim \
                  https://github.com/dom96/choosenim.git \
                  v${CHOOSENIM_VERSION}
          clone1b nim \
                  https://github.com/nim-lang/Nim.git \
                  ${{ matrix.nim_version }}
          clone1b notcurses \
                  https://github.com/dankamongmen/notcurses.git \
                  v${NOTCURSES_VERSION}
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            echo "bash_env=$(cygpath -m "${HOME}")/.bash_env" >> ${GITHUB_OUTPUT}
            echo "choosenim=$(cygpath -m "${USERPROFILE}")/.choosenim" >> ${GITHUB_OUTPUT}
            echo "nimble=$(cygpath -m "${HOME}")/.nimble" >> ${GITHUB_OUTPUT}
            echo "notcurses=$(cygpath -m "${HOME}")/repos/notcurses" >> ${GITHUB_OUTPUT}
          else
            echo "bash_env=${HOME}/.bash_env" >> ${GITHUB_OUTPUT}
            echo "choosenim=${HOME}/.choosenim" >> ${GITHUB_OUTPUT}
            echo "nimble=${HOME}/.nimble" >> ${GITHUB_OUTPUT}
            echo "notcurses=${HOME}/repos/notcurses" >> ${GITHUB_OUTPUT}
          fi

      - name: Restore artifacts from cache
        id: artifacts-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.cache-key.outputs.bash_env }}
            ${{ steps.cache-key.outputs.choosenim }}
            ${{ steps.cache-key.outputs.nimble }}/bin
            ${{ steps.cache-key.outputs.notcurses }}
          key: "${{ matrix.platform.os }}\
                +choosenim_version:${{ steps.cache-key.outputs.choosenim_version }}\
                +choosenim_commit:${{ steps.cache-key.outputs.choosenim_commit }}\
                +nim:${{ matrix.nim_version }}\
                +nim_commit:${{ steps.cache-key.outputs.nim_commit }}\
                +notcurses_version:${{ steps.cache-key.outputs.notcurses_version }}\
                +notcurses_commit:${{ steps.cache-key.outputs.notcurses_commit }}\
                +cache_marker:${{ matrix.cache_marker }}"

      - name: Checkout Notcurses sources from GitHub and compile
        if: steps.artifacts-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${HOME}/repos" && cd "${HOME}/repos"
          git clone --depth 1 https://github.com/dankamongmen/notcurses.git \
                    --branch v${{ steps.cache-key.outputs.notcurses_version }} \
                    --single-branch
          cd notcurses
          mkdir build && cd build
          if [[ ${{ matrix.platform.os }} != windows ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                     -DUSE_DOCTEST=off \
                     -DUSE_PANDOC=off
            make -j${NPROC}
          else
            cmake .. -G"MSYS Makefiles" \
                     -DCMAKE_BUILD_TYPE=Release \
                     -DUSE_DOCTEST=off \
                     -DUSE_PANDOC=off
            make
          fi

      - name: Install Notcurses
        run: |
          cd "${HOME}/repos/notcurses/build"
          if [[ ${{ matrix.platform.os }} != windows ]]; then
            if [[ ${{ matrix.platform.os }} = macos ]]; then
              make install
            else
              sudo make install
              sudo ldconfig
            fi
          else
            cp -R ../include/notcurses /ucrt64/include
            cp -R ../include/ncpp /ucrt64/include
            cp *.dll /ucrt64/bin
            cp *.dll.a /ucrt64/lib
          fi

      - name: Install choosenim and Nim
        if: steps.artifacts-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${HOME}/Downloads" && cd "${HOME}/Downloads"
          curl -sSf -O https://nim-lang.org/choosenim/init.sh
          chmod +x init.sh
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            mkdir -p "$(cygpath "${USERPROFILE}")/.nimble/bin"
          fi
          CHOOSENIM_CHOOSE_VERSION=\#${{ matrix.nim_version }} \
          CHOOSENIM_NO_ANALYTICS=1 \
          ./init.sh -y
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            mv "$(cygpath "${USERPROFILE}")/.nimble" "${HOME}/"
            # intention is to rely on what's provided by Windows OS and MSYS2
            cd "${HOME}/.nimble/bin/"
            rm -f *.dll *.pem
          fi
          echo 'export NIMBLE_DIR="${HOME}/.nimble"' >> "${HOME}/.bash_env"
          echo 'export PATH="${NIMBLE_DIR}/bin:${PATH}"' >> "${HOME}/.bash_env"

      # maybe can be reworked (along with caching logic) re: nimble
      # corresponding to Nim v2, with conditional logic for older Nim/nimble
      - name: Install project dependencies per nimble
        run: |
          # delete broken symlinks, which can arise because e.g. the cache
          # restored a symlink that points to an executable within
          # ../pkgs/foo-1.2.3/ but the project's .nimble file has been updated
          # to install foo-#head. In the case of a broken symlink, nimble's
          # auto-overwrite fails (only sometimes? only on macOS?)
          cd "${NIMBLE_DIR}/bin"
          if [[ ${{ matrix.platform.os }} = macos ]]; then
            gfind . -xtype l -delete
          else
            find . -xtype l -delete
          fi
          cd -
          source "${HOME}/.bash_env"
          nimble --accept install --depsOnly

      # - name: Build and run tests
      #   run: |
      #     source "${HOME}/.bash_env"
      #     nimble test

      - name: Build and run examples/poc/cli1 (Linux, macOS)
        if: matrix.platform.os != 'windows'
        env:
          COLORTERM: 24bit
          TERM: xterm-256color
        run: |
          source "${HOME}/.bash_env"
          nim c -r examples/poc/cli1.nim

      - name: Build examples/poc/cli1 (Windows)
        if: matrix.platform.os == 'windows'
        run: |
          source "${HOME}/.bash_env"
          nim c examples/poc/cli1.nim
