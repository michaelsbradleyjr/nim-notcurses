name: Tests

# on:
#   pull_request:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  tests:
    env:
      NPROC: 2
    strategy:
      fail-fast: false
      matrix:
        cache_nonce: [ 8 ]
        nim_version: [ version-1-2, version-1-6, version-2-0 ]
        platform:
          - {
            icon: 🐧,
            label: Linux,
            os: ubuntu,
            shell: bash --noprofile --norc -eo pipefail
          }
          - {
            icon: 🍎,
            label: macOS,
            os: macos,
            shell: bash --noprofile --norc -eo pipefail
          }
          - {
            icon: 🏁,
            label: Windows,
            os: windows,
            shell: msys2
          }
    name: ${{ matrix.platform.icon }} ${{ matrix.platform.label }} - Nim ${{ matrix.nim_version }}
    runs-on: ${{ matrix.platform.os }}-latest
    defaults:
      run:
        shell: ${{ matrix.platform.shell }} {0}

    steps:
      - name: Install tools and libraries via APT (Linux)
        if: matrix.platform.os == 'ubuntu'
        run: |
          sudo apt-fast update -qq
          sudo DEBIAN_FRONTEND='noninteractive' apt-fast install --no-install-recommends -yq \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libdeflate-dev \
            libswscale-dev \
            libunistring-dev

      - name: Install tools and libraries via Homebrew (macOS)
        if: matrix.platform.os == 'macos'
        run: |
          brew install \
            coreutils \
            ffmpeg \
            findutils \
            libdeflate \
            libunistring \
            ncurses

      - name: Install tools and libraries via MSYS2 (Windows)
        if: matrix.platform.os == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >
            base-devel
            git
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ffmpeg
            mingw-w64-ucrt-x86_64-libdeflate
            mingw-w64-ucrt-x86_64-libunistring
            mingw-w64-ucrt-x86_64-toolchain

      - name: Checkout sources from GitHub
        uses: actions/checkout@v3

      - name: Compile and install Notcurses from source
        run: |
          NOTCURSES_VERSION=$(cat VERSION)
          rm -rf "${HOME}/repos/notcurses"
          mkdir -p "${HOME}/repos"
          cd "${HOME}/repos"
          git clone https://github.com/dankamongmen/notcurses.git
          cd notcurses
          git checkout tags/v${NOTCURSES_VERSION}
          mkdir build
          cd build
          if [[ ${{ matrix.platform.os }} != windows ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_DOCTEST=off -DUSE_PANDOC=off
            make -j${NPROC}
            if [[ ${{ matrix.platform.os }} = macos ]]; then
              make install
            else
              sudo make install
              sudo ldconfig
            fi
          else
            cmake .. -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DUSE_DOCTEST=off -DUSE_PANDOC=off
            make
            cp -R ../include/notcurses /ucrt64/include
            cp -R ../include/ncpp /ucrt64/include
            cp *.dll /ucrt64/bin
            cp *.dll.a /ucrt64/lib
          fi

      - name: Calculate cache member paths
        id: calc-paths
        run: |
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            echo "bash_env=$(cygpath -m "${HOME}")/.bash_env" >> ${GITHUB_OUTPUT}
            echo "choosenim=$(cygpath -m "${USERPROFILE}")/.choosenim" >> ${GITHUB_OUTPUT}
            echo "nimble=$(cygpath -m "${HOME}")/.nimble" >> ${GITHUB_OUTPUT}
          else
            echo "bash_env=${HOME}/.bash_env" >> ${GITHUB_OUTPUT}
            echo "choosenim=${HOME}/.choosenim" >> ${GITHUB_OUTPUT}
            echo "nimble=${HOME}/.nimble" >> ${GITHUB_OUTPUT}
          fi

      - name: Restore choosenim and Nim tooling from cache
        id: choosenim-nim-tooling-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.calc-paths.outputs.bash_env }}
            ${{ steps.calc-paths.outputs.choosenim }}
            ${{ steps.calc-paths.outputs.nimble }}/bin
          key: ${{ matrix.platform.os }}-nim:${{ matrix.nim_version }}-cache_nonce:${{ matrix.cache_nonce }}

      - name: Install choosenim and Nim tooling
        if: steps.choosenim-nim-tooling-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${HOME}/Downloads"
          cd "${HOME}/Downloads"
          curl https://nim-lang.org/choosenim/init.sh -sSf -O
          chmod +x init.sh
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            mkdir -p "$(cygpath "${USERPROFILE}")/.nimble/bin"
          fi
          CHOOSENIM_CHOOSE_VERSION=\#${{ matrix.nim_version }} ./init.sh -y
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            mv "$(cygpath "${USERPROFILE}")/.nimble" "${HOME}/"
            # intention is to rely only on libs provided by the OS and MSYS2 env
            rm -rf "${HOME}/.nimble/bin/"*.dll
            rm -rf "${HOME}/.nimble/bin/"*.pem
          fi
          echo 'export NIMBLE_DIR="${HOME}/.nimble"' >> "${HOME}/.bash_env"
          echo 'export PATH="${NIMBLE_DIR}/bin:${PATH}"' >> "${HOME}/.bash_env"

      - name: Install project dependencies
        run: |
          source "${HOME}/.bash_env"
          cd "${NIMBLE_DIR}/bin"
          # delete broken symlinks, which can arise because e.g. the cache
          # restored a symlink that points to an executable within
          # ../pkgs/foo-1.2.3/ but the project's .nimble file has been updated
          # to install foo-#head. In the case of a broken symlink, nimble's
          # auto-overwrite fails (only sometimes? only on macOS?)
          if [[ ${{ matrix.platform.os }} = macos ]]; then
            gfind . -xtype l -delete
          else
            find . -xtype l -delete
          fi
          cd -
          nimble --accept install

      # - name: Build and run tests
      #   run: |
      #     source "${HOME}/.bash_env"
      #     nimble test

      - name: Build and run examples/poc/cli1 (Linux, macOS)
        if: matrix.platform.os != 'windows'
        env:
          COLORTERM: truecolor
          TERM: xterm-256color
        run: |
          source "${HOME}/.bash_env"
          nim c -r examples/poc/cli1.nim

      - name: Build examples/poc/cli1 (Windows)
        if: matrix.platform.os == 'windows'
        run: |
          source "${HOME}/.bash_env"
          nim c examples/poc/cli1.nim
